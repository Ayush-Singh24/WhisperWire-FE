generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  receiver Conversation[] @relation("Receiver")
  sender   Conversation[] @relation("Sender")

  seenMessages Message[] @relation("Seen")
  messages     Message[]

  receivedRequests FriendRequest[]
  sentRequests     FriendRequest[] @relation("Sent")

  friends         User[] @relation("Friends")
  friendsRelation User[] @relation("Friends")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  // name          String?
  // isGroup       Boolean?

  messages Message[]

  receiverId String
  receiver   User   @relation("Receiver", fields: [receiverId], references: [id])
  senderId   String
  sender     User   @relation("Sender", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model Message {
  id        String   @id @default(cuid())
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seen User[] @relation("Seen")

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])
}

model FriendRequest {
  id         String @id @default(cuid())
  receiverId String
  receiver   User   @relation(fields: [receiverId], references: [id])
  senderId   String
  sender     User   @relation("Sent", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}
